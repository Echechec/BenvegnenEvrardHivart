## Classes pièces

#La couleur noir correspond à -1, blanc à 1. La couleur d'une case inocuppée est 0

class Vide():

    def __init__(self):
         self.couleur = 0
         


class Pion():
    def __init__(self,couleur):
        self.couleur = couleur
        self.ligneInitiale = (-3.5*couleur+3.5)
        
    def possibilitesAbsolues(self,a,b):
        __Cases=[]
        if a in range(1,7):
            #déplacement normal
            if G[a+self.couleur][b].couleur == 0:
                __Cases.append((a+self.couleur,b))

            #déplacement de deux cases du début
            if a == self.ligneInitiale+self.couleur and G[a+self.couleur][b].couleur == 0 and G[a+2*self.couleur][b].couleur == 0:
                __Cases.append((a+2*self.couleur,b))
            

            #déplacement du fait de la mangeaison d'une pièce adverse
            for k in [1,-1]:
                if G[a+self.couleur][b+k].couleur == (-1)*self.couleur:
                    __Cases.append((a+self.couleur,b+k))
        return __Cases
        

class Cavalier():

    def __init__(self,coul):
        self.couleur = coul
        self.ligneInitiale = (-3.5*couleur+3.5)


    def possibilitesAbsolues(self,a,b):
        __Cases = []
        for c in range(a-2,a+3):
            for d in range(b-2,b+3):
                i = a-c
                j = b-d
                print(c,d)
                if i**2+j**2 == 5 and c < 8 and c > -1 and d < 8 and d > -1 and G[c][d].couleur != self.couleur :
                        __Cases += [(c,d)]
        print(__Cases)


class Tour():
    def __init__(self,couleur):
        self.couleur=couleur
        self.ligneInitiale = (-3.5*couleur+3.5)
        self.virginite = True

    def possibilitesAbsolues(self,a,b):
        __Cases = []
        c = a+1
        while c < 8 and G[c][b].couleur != self.couleur:
            __Cases.append((c,b))
            if G[c][b].couleur == (-1)*self.couleur:
                c = 8
            c += 1
        c = a-1
        while c > -1 and G[c][b].couleur != self.couleur:
            __Cases.append((c,b))
            if G[c][b].couleur == (-1)*self.couleur:
                c = -1
            c -= 1
        d = b+1
        while d < 8 and G[a][d].couleur != self.couleur:
            __Cases.append((a,d))
            if G[a][d].couleur == (-1)*self.couleur:
                d = 8
            d += 1
        d = b-1
        while d > -1 and G[a][d].couleur != self.couleur:
            __Cases.append((a,d))
            if G[a][d].couleur == (-1)*self.couleur:
                d = -1
            d -= 1
        return __Cases


class Fou():
    def __init__(self,couleur):
        self.couleur=couleur
        self.ligneInitiale = (-3.5*couleur+3.5)

    def possibilitesAbsolues(self,a,b):
        __Cases = []
        l = 1
        while a+l < 8 and b+l < 8 and G[a+l][b+l].couleur != self.couleur:
            __Cases.append((a+l,b+l))
            if G[a+l][b+l].couleur == (-1)*self.couleur:
                l = 8
            l += 1
        l = 1
        while a-l > -1 and b-l > -1 and G[a-l][b-l].couleur != self.couleur:
            __Cases.append((a-l,b-l))
            if G[a-l][b-l].couleur == (-1)*self.couleur:
                l = -1
            l -= 1
        l = 1
        while a+l < 8 and b-l > -1 and G[a+l][b-l].couleur != self.couleur:
            __Cases.append((a+l,b-l))
            if G[a+l][b-l].couleur == (-1)*self.couleur:
                l = 8
            l += 1
        l = 1
        while a-l > -1 and b+l < 8 and G[a-l][b+l].couleur != self.couleur:
            __Cases.append((a-l,b+l))
            if G[a-l][b+l].couleur == (-1)*self.couleur:
                l = -1
            l -= 1
        return __Cases



class Dame():

    def __init__(self,coul):
        self.couleur = coul
        self.ligneInitiale = (-3.5*couleur+3.5)

    def possibilitesAbsolues(self,a,b):
        __Cases = []
        l = 1
        while a+l < 8 and b+l < 8 and G[a+l][b+l].couleur != self.couleur:
            __Cases.append((a+l,b+l))
            if G[a+l][b+l].couleur == (-1)*self.couleur:
                l = 8
            l += 1
        l = 1
        while a-l > -1 and b-l > -1 and G[a-l][b-l].couleur != self.couleur:
            __Cases.append((a-l,b-l))
            if G[a-l][b-l].couleur == (-1)*self.couleur:
                l = -1
            l -= 1
        l = 1
        while a+l < 8 and b-l > -1 and G[a+l][b-l].couleur != self.couleur:
            __Cases.append((a+l,b-l))
            if G[a+l][b-l].couleur == (-1)*self.couleur:
                l = 8
            l += 1
        l = 1
        while a-l > -1 and b+l < 8 and G[a-l][b+l].couleur != self.couleur:
            __Cases.append((a-l,b+l))
            if G[a-l][b+l].couleur == (-1)*self.couleur:
                l = -1
            l -= 1
        c = a+1
        while c < 8 and G[c][b].couleur != self.couleur:
            __Cases.append((c,b))
            if G[c][b].couleur == (-1)*self.couleur:
                c = 8
            c += 1
        c = a-1
        while c > -1 and G[c][b].couleur != self.couleur:
            __Cases.append((c,b))
            if G[c][b].couleur == (-1)*self.couleur:
                c = -1
            c -= 1
        d = b+1
        while d < 8 and G[a][d].couleur != self.couleur:
            __Cases.append((a,d))
            if G[a][d].couleur == (-1)*self.couleur:
                d = 8
            d += 1
        d = b-1
        while d > -1 and G[a][d].couleur != self.couleur:
            __Cases.append((a,d))
            if G[a][d].couleur == (-1)*self.couleur:
                d = -1
            d -= 1
        return __Cases
        
        
class Roi():
    def __init__(self,coul):
        self.couleur = coul
        self.ligneInitiale = (-3.5*couleur+3.5)
        self.virginite = True

    def possibilitesAbsolues(self,a,b):
        __Cases = []
        for i in [-1, 0, 1]:
            for j in [-1, 0, 1]:
                c=a+i
                d=b+j
                if G[c][d].couleur!=self.couleur and c<8 and d<8:
                    __Cases.append((c,d))
        return(__Cases)
                
#la fonction qui teste si la case (a,b) est dans la ligne de mire d'une pièce de couleur "coul"
def vulnerabilite(a,b,coul):
    
    for c in range(8):
        for d in range(8):
            if G[c][d].couleur==coul:
                if (a,b) in G.possibilitesAbsolues(c,d):
                    return True
                    
    return e                
                
#(Ab,Bb) position du roi blanc
#(An,Bn) position du roi noir
#(X,Y) case sur laquelle l'utilisateur clique au début de son tour
            
## Programme principal

G = []
for i in range(8):
    g = []
    for j in range(8):
        g += [0]
    G += [g]

G[0][0]=Tour(1)
G[0][7]=Tour(1)
G[7][0]=Tour(-1)
G[7][7]=Tour(-1)

G[0][1]=Cavalier(1)
G[0][6]=Cavalier(1)
G[7][1]=Cavalier(-1)
G[7][6]=Cavalier(-1)

G[0][2]=Fou(1)
G[0][5]=Fou(1)
G[7][2]=Fou(-1)
G[7][5]=Fou(-1)

G[0][3]=Roi(1)
G[0][4]=Dame(1)
G[7][3]=Roi(-1)
G[7][4]=Dame(-1)


for k in range (8):
    G[1][k]= Pion(1)
    G[6][k]= Pion(-1)

for i in range (8):
    for j in range(2, 6):
        G[i][j]=Vide()

J1=input("Joueur 1:")
J2=input("Joueur 2:")

H=input(str(J1)+", choisissez un côté ('pile' ou 'face'):")
while H!="face" and H!="pile":
    H=input("Vous devez saisir 'pile' ou 'face':")
Tirage=choice(["face", "pile"])
print("Le tirage donne", Tirage)
if Tirage==H:
    print(J1, "joue les blancs")
else:
    print(J2, "joue les blancs")
    
## Roque, c'est rock'n roll croyez-moi

possibiliteExtra == []

cou = G[X][Y].couleur
l = G[X][Y].ligneInitiale 
grandRoque = vulnerabilite(l,0,-cou) or vulnerabilite(l,1,-cou) or vulnerabilite(l,2,-cou) or vulnerabilite(l,3,-cou) or vulnerabilite(l,4,-cou) 
petitRoque = vulnerabilite(l,5,-cou) or vulnerabilite(l,6,-cou) or vulnerabilite(l,7,-cou)
    
# Cas du roi
if G[X][Y] == R and G[X][Y].virginite == False:
    if  G[l][5] == V and G[l][6] == V and petitRoque == False:
        possibiliteExtra += (l,6)
    if G[l][3] == V and G[l][2] == V and G[l][1] == V and grandRoque == False:
        possibilitesExtra += (l,2)
    

# Cas de la tour
if G[X][Y] == T and G[X][Y].virginite == False:
    if  G[l][5] == V and G[l][6] == V and grandRoque == False:
        possibiliteExtra += (l,5)
    if G[l][3] == V and G[l][2] == V and G[l][1] == V grandRoque == False:
            possibilitesExtra += (l,3)


C = Cavalier(1)
G[3][4] = C
T = Tour(-1)
G[2][2] = T
F = Fou(1)
G[0][5] = F
D = Dame(-1)
G[5][5] = D
