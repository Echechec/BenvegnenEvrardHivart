## Classes
class Vide():

    def __init__(self):
         self.couleur = 0
         self.type = "Vide"



class Pion():
    def __init__(self,couleur):
        self.couleur = couleur
        self.ligneInitiale = int(-3.5*couleur + 3.5)
        self.type = "Pion"
        self.imprudence = False

    def possibilitesAbsolues(self,a,b):
        __Cases=[]
        if a in range(1,7):
            #déplacement normal
            if G[a+self.couleur][b].couleur == 0:
                __Cases.append((a+self.couleur,b))

            #déplacement de deux cases du début
            if a == self.ligneInitiale+self.couleur and G[a+self.couleur][b].couleur == 0 and G[a+2*self.couleur][b].couleur == 0:
                __Cases.append((a+2*self.couleur,b))


            #déplacement pour manger une pièce adverse
            for k in [1,-1]:
                if b+k < 8 and b+k > -1 and G[a+self.couleur][b+k].couleur == (-1)*self.couleur:
                    __Cases.append((a+self.couleur,b+k))

            #Prise en passant
            if a == self.ligneInitiale + self.couleur*4 :
                if G[a][b+1].type == "Pion" and G[a][b+1].couleur == -self.couleur and G[a][b+1].imprudence and G[a+self.couleur][b+1].type == "Vide":
                    __Cases.append((a+self.couleur,b+1))
                if G[a][b-1].type == "Pion" and G[a][b-1].couleur == -self.couleur and G[a][b-1].imprudence and G[a+self.couleur][b-1].type == "Vide":
                    __Cases.append((a+self.couleur,b-1))

        return __Cases


    def possibilites(self,a,b):
        _Cases_absolues = self.possibilitesAbsolues(a,b)
        _Cases_interdites = []
        for i in _Cases_absolues:
            (c,d) = i
            memo = G[c][d]
            G[c][d] = G[a][b]
            G[a][b] = Vide()
            if self.couleur == 1:
                if vulnerabilite(Ab,Bb,-1):
                    _Cases_interdites.append(i)
            if self.couleur == -1:
                if vulnerabilite(An,Bn,1):
                    _Cases_interdites.append(i)
            G[a][b] = G[c][d]
            G[c][d] = memo
        _Cases_autorisees = []
        for i in _Cases_absolues :
            if not i in _Cases_interdites :
                _Cases_autorisees.append(i)
        return _Cases_autorisees

#imprudence est un booléen activé lorsqu'un pion avance de 2, et immédiatement désactivé le coup suivant

class Cavalier():

    def __init__(self,couleur):
        self.couleur = couleur
        self.ligneInitiale = int(-3.5*couleur + 3.5)
        self.type = "Cavalier"


    def possibilitesAbsolues(self,a,b):
        __Cases = []
        for c in range(a-2,a+3):
            for d in range(b-2,b+3):
                i = a-c
                j = b-d
                if i**2+j**2 == 5 and c < 8 and c > -1 and d < 8 and d > -1 and G[c][d].couleur != self.couleur :
                        __Cases += [(c,d)]
        return(__Cases)

    def possibilites(self,a,b):
        _Cases_absolues = self.possibilitesAbsolues(a,b)
        _Cases_interdites = []
        for i in _Cases_absolues:
            (c,d) = i
            memo = G[c][d]
            G[c][d] = G[a][b]
            G[a][b] = Vide()
            if self.couleur == 1:
                if vulnerabilite(Ab,Bb,-1):
                    _Cases_interdites.append(i)
            if self.couleur == -1:
                if vulnerabilite(An,Bn,1):
                    _Cases_interdites.append(i)
            G[a][b] = G[c][d]
            G[c][d] = memo
        _Cases_autorisees = []
        for i in _Cases_absolues :
            if not i in _Cases_interdites :
                _Cases_autorisees.append(i)
        return _Cases_autorisees


class Tour():
    def __init__(self,couleur):
        self.couleur=couleur
        self.ligneInitiale = int(-3.5*couleur + 3.5)
        self.type = "Tour"
        self.virginite = True

    def possibilitesAbsolues(self,a,b):
        __Cases = []
        c = a+1
        while c < 8 and G[c][b].couleur != self.couleur:
            __Cases.append((c,b))
            if G[c][b].couleur == (-1)*self.couleur:
                c = 8
            c += 1
        c = a-1
        while c > -1 and G[c][b].couleur != self.couleur:
            __Cases.append((c,b))
            if G[c][b].couleur == (-1)*self.couleur:
                c = -1
            c -= 1
        d = b+1
        while d < 8 and G[a][d].couleur != self.couleur:
            __Cases.append((a,d))
            if G[a][d].couleur == (-1)*self.couleur:
                d = 8
            d += 1
        d = b-1
        while d > -1 and G[a][d].couleur != self.couleur:
            __Cases.append((a,d))
            if G[a][d].couleur == (-1)*self.couleur:
                d = -1
            d -= 1
        return __Cases

    def possibilites(self,a,b):
        _Cases_absolues = self.possibilitesAbsolues(a,b)
        _Cases_interdites = []
        for i in _Cases_absolues:
            (c,d) = i
            memo = G[c][d]
            G[c][d] = G[a][b]
            G[a][b] = Vide()
            if self.couleur == 1:
                if vulnerabilite(Ab,Bb,-1):
                    _Cases_interdites.append(i)
            if self.couleur == -1:
                if vulnerabilite(An,Bn,1):
                    _Cases_interdites.append(i)
            G[a][b] = G[c][d]
            G[c][d] = memo
        _Cases_autorisees = []
        for i in _Cases_absolues :
            if not i in _Cases_interdites :
                _Cases_autorisees.append(i)
        return _Cases_autorisees


class Fou():
    def __init__(self,couleur):
        self.couleur = couleur
        self.ligneInitiale = int(-3.5*couleur + 3.5)
        self.type = "Fou"

    def possibilitesAbsolues(self,a,b):
        __Cases = []
        l = 1
        while a+l < 8 and b+l < 8 and G[a+l][b+l].couleur != self.couleur:
            __Cases.append((a+l,b+l))
            if G[a+l][b+l].couleur == (-1)*self.couleur:
                l = 8
            l += 1
        l = 1
        while a-l > -1 and b-l > -1 and G[a-l][b-l].couleur != self.couleur:
            __Cases.append((a-l,b-l))
            if G[a-l][b-l].couleur == (-1)*self.couleur:
                l = -1
            l += 1
        l = 1
        while a+l < 8 and b-l > -1 and G[a+l][b-l].couleur != self.couleur:
            __Cases.append((a+l,b-l))
            if G[a+l][b-l].couleur == (-1)*self.couleur:
                l = 8
            l += 1
        l = 1
        while a-l > -1 and b+l < 8 and G[a-l][b+l].couleur != self.couleur:
            __Cases.append((a-l,b+l))
            if G[a-l][b+l].couleur == (-1)*self.couleur:
                l = -1
            l += 1
        return __Cases

    def possibilites(self,a,b):
        _Cases_absolues = self.possibilitesAbsolues(a,b)
        _Cases_interdites = []
        for i in _Cases_absolues:
            (c,d) = i
            memo = G[c][d]
            G[c][d] = G[a][b]
            G[a][b] = Vide()
            if self.couleur == 1:
                if vulnerabilite(Ab,Bb,-1):
                    _Cases_interdites.append(i)
            if self.couleur == -1:
                if vulnerabilite(An,Bn,1):
                    _Cases_interdites.append(i)
            G[a][b] = G[c][d]
            G[c][d] = memo
        _Cases_autorisees = []
        for i in _Cases_absolues :
            if not i in _Cases_interdites :
                _Cases_autorisees.append(i)
        return _Cases_autorisees



class Dame():

    def __init__(self,couleur):
        self.couleur = couleur
        self.ligneInitiale = int(-3.5*couleur + 3.5)
        self.type = "Dame"

    def possibilitesAbsolues(self,a,b):
        __Cases = []
        l = 1
        while a+l < 8 and b+l < 8 and G[a+l][b+l].couleur != self.couleur:
            __Cases.append((a+l,b+l))
            if G[a+l][b+l].couleur == (-1)*self.couleur:
                l = 8
            l += 1
        l = 1
        while a-l > -1 and b-l > -1 and G[a-l][b-l].couleur != self.couleur:
            __Cases.append((a-l,b-l))
            if G[a-l][b-l].couleur == (-1)*self.couleur:
                l = -1
            l += 1
        l = 1
        while a+l < 8 and b-l > -1 and G[a+l][b-l].couleur != self.couleur:
            __Cases.append((a+l,b-l))
            if G[a+l][b-l].couleur == (-1)*self.couleur:
                l = 8
            l += 1
        l = 1
        while a-l > -1 and b+l < 8 and G[a-l][b+l].couleur != self.couleur:
            __Cases.append((a-l,b+l))
            if G[a-l][b+l].couleur == (-1)*self.couleur:
                l = -1
            l += 1
        c = a+1
        while c < 8 and G[c][b].couleur != self.couleur:
            __Cases.append((c,b))
            if G[c][b].couleur == (-1)*self.couleur:
                c = 8
            c += 1
        c = a-1
        while c > -1 and G[c][b].couleur != self.couleur:
            __Cases.append((c,b))
            if G[c][b].couleur == (-1)*self.couleur:
                c = -1
            c -= 1
        d = b+1
        while d < 8 and G[a][d].couleur != self.couleur:
            __Cases.append((a,d))
            if G[a][d].couleur == (-1)*self.couleur:
                d = 8
            d += 1
        d = b-1
        while d > -1 and G[a][d].couleur != self.couleur:
            __Cases.append((a,d))
            if G[a][d].couleur == (-1)*self.couleur:
                d = -1
            d -= 1
        return __Cases

    def possibilites(self,a,b):
        _Cases_absolues = self.possibilitesAbsolues(a,b)
        _Cases_interdites = []
        for i in _Cases_absolues:
            (c,d) = i
            memo = G[c][d]
            G[c][d] = G[a][b]
            G[a][b] = Vide()
            if self.couleur == 1:
                if vulnerabilite(Ab,Bb,-1):
                    _Cases_interdites.append(i)
            if self.couleur == -1:
                if vulnerabilite(An,Bn,1):
                    _Cases_interdites.append(i)
            G[a][b] = G[c][d]
            G[c][d] = memo
        _Cases_autorisees = []
        for i in _Cases_absolues :
            if not i in _Cases_interdites :
                _Cases_autorisees.append(i)
        return _Cases_autorisees


class Roi():
    def __init__(self,couleur):
        self.couleur = couleur
        self.ligneInitiale = int(-3.5*couleur + 3.5)
        self.type = "Roi"
        self.virginite = True

    def possibilitesAbsolues(self,a,b):
        __Cases = []
        for i in [-1, 0, 1]:
            for j in [-1, 0, 1]:
                c=a+i
                d=b+j
                if c<8 and d<8 and c>-1 and d>-1 and G[c][d].couleur!=self.couleur :
                    __Cases.append((c,d))
        return(__Cases)

    def roquabilite(self):
        r = [False,False]
        cou = self.couleur
        L = self.ligneInitiale
        petitRoque = not(vulnerabilite(L,0,-cou) or vulnerabilite(L,1,-cou) or vulnerabilite(L,2,-cou) or vulnerabilite(L,3,-cou))
        grandRoque = not(vulnerabilite(L,3,-cou) or vulnerabilite(L,4,-cou) or vulnerabilite(L,5,-cou) or vulnerabilite(L,6,-cou) or vulnerabilite(L,7,-cou))
        if self.virginite:
            if  G[L][1].type == "Vide" and G[L][2].type == "Vide" and petitRoque and G[L][0].type == "Tour" and G[L][0].virginite :
                r[0] = True
            if G[L][4].type == "Vide" and G[L][5].type == "Vide" and G[L][6].type == "Vide" and grandRoque and G[L][7].type == "Tour" and G[L][7].virginite:
                r[1] = True
        return(r)

    def possibilites(self,a,b):
        _Cases_absolues = self.possibilitesAbsolues(a,b)
        _Cases_interdites = []
        for i in _Cases_absolues:
            (c,d) = i
            memo = G[c][d]
            G[c][d] = G[a][b]
            G[a][b] = Vide()
            if vulnerabilite(c,d,-1*self.couleur):
                _Cases_interdites.append(i)
            G[a][b] = G[c][d]
            G[c][d] = memo
        _Cases_autorisees = []
        for i in _Cases_absolues :
            if not i in _Cases_interdites :
                _Cases_autorisees.append(i)
        if self.roquabilite()[0] :
            _Cases_autorisees.append((self.ligneInitiale,1))
        if self.roquabilite()[1] :
            _Cases_autorisees.append((self.ligneInitiale,5))
        return _Cases_autorisees

#roquabilite renvoie [True,True] si les deux roques sont possibles (donc si le joueur a sélectionné le roi), [True,Flase] si le petit roque est possible, [False,True] si le grand roque est possible.

## Grille
G = []
for i in range(8):
    g = []
    for j in range(8):
        g += [0]
    G += [g]

G[0][0]=Tour(1)
G[0][7]=Tour(1)
G[7][0]=Tour(-1)
G[7][7]=Tour(-1)

G[0][1]=Cavalier(1)
G[0][6]=Cavalier(1)
G[7][1]=Cavalier(-1)
G[7][6]=Cavalier(-1)

G[0][2]=Fou(1)
G[0][5]=Fou(1)
G[7][2]=Fou(-1)
G[7][5]=Fou(-1)

G[0][3]=Roi(1)
(Ab,Bb)=(0,3)
G[0][4]=Dame(1)
G[7][3]=Roi(-1)
(An,Bn)=(7,3)
G[7][4]=Dame(-1)


for k in range (8):
    G[1][k]= Pion(1)
    G[6][k]= Pion(-1)

for i in range (2, 6):
    for j in range(8):
        G[i][j]=Vide()



## Corps
def vulnerabilite(a,b,couleur):

    for c in range(8):
        for d in range(8):
            if G[c][d].couleur == couleur:
                if (a,b) in G[c][d].possibilitesAbsolues(c,d):
                    return True
    return False

#(Ab,Bb) position du roi blanc
#(An,Bn) position du roi noir
#(X,Y) case sur laquelle l'utilisateur clique au début de son tour

#Si joueur est pair alors les pièces blanches peuvent être sélectionnées, sinon les pièces noires --> couleur = 1**(joueur%2)
joueur = 0

if False :
    X = abscisse_du_clic
    Y = ordonnée_du_clic


#nouveau est la dernière pièce à être jouée, dans son emplacement d'arivée

#def choix(M,N):

#réinitialisation des imprudences
    for i in range(0,7):
        for j in range(0,7):
            if G[i][j].type == "Pion": G[i][j].imprudence = False

#réinitialisation de la grille
    M = abscisse_darrivee
    N = ordonnee_darrivee
    G[M][N] = G[X][Y]
    G[X][Y] = Vide()
    nouveau = G[M][N]

#allumage de l'imprudence
    if nouveau.type == "Pion" and (X-M)**2 == 4 : nouveau.imprudence = True
#éteignage de la virginité
    if nouveau.type == "Tour" or nouveau.type == "Roi" : nouveau.virginite = False

#effet du roque
    if G[M][N].type == "Roi" and (Y-N)**2 == 4:
        if Y == 1:
            G[G[M][N].ligneInitiale][2] = G[G[M][N].ligneInitiale][0]
            G[G[M][N].ligneInitiale][0] = Vide()
        if Y == 5:
            G[G[M][N].ligneInitiale][4] = G[G[M][N].ligneInitiale][7]
            G[G[M][N].ligneInitiale][7] = Vide()

#effet de la prise en passant
    if G[M][N].type == "Pion" and (X-M)**2+(Y-N)**2 == 2 and CopiePriseEnPassant.type == "Vide":
        G[X][N] = "Vide"

#pion en bout de ligne : changement de pièce

#Progression des tours de jeux
    joueur += 1

#PAT
    coul = -1
    ok = []
    a = 0
    while ok == [] and a < 8 :
        b = 0
        while ok == [] and b < 8:
            if G[a][b].couleur == coul:
                for i in G[a][b].possibilites(a,b):
                    ok += [i]
            b += 1
        a += 1
    if ok == []: pat = True
    else : pat = False



## Interface

import pygame

class GameState():
    def __init__(self):
        self.board=[
            ["Tb", "Cb", "Fb", "Rb", "Db", "Fb", "Cb", "Tb"],
            ["pb", "pb", "pb", "pb", "pb", "pb", "pb", "pb"],
            ["_", "_", "_", "_", "_", "_", "_", "_"],
            ["_", "_", "_", "_", "_", "_", "_", "_"],
            ["_", "_", "_", "_", "_", "_", "_", "_"],
            ["_", "_", "_", "_", "_", "_", "_", "_"],
            ["pn", "pn", "pn", "pn", "pn", "pn", "pn", "pn"],
            ["Tn", "Cn", "Fn", "Rn", "Dn", "Fn", "Cn", "Tn"]
        ]
        self.whiteToMove = True
        self.moveLog=[]

    def MakeMove(self, move):
        self.board[move.depart_ligne][move.depart_colonne] = "_"
        self.board[move.arrivee_ligne][move.arrivee_colonne] = move.piece_deplacee
        self.moveLog.append(move)
        self.whiteToMove = not self.whiteToMove

class Deplacement():

    def __init__(self, depart, arrivee, board):
        self.depart_ligne = depart[0]
        self.depart_colonne = depart[1]
        self.arrivee_ligne = arrivee[0]
        self.arrivee_colonne = arrivee[1]
        self.piece_deplacee = board[self.depart_ligne][self.depart_colonne]
        self.piece_capturee = board[self.arrivee_ligne][self.arrivee_colonne]


Longueur = Largeur = 512
Dimension = 8
Taille_Carre = Longueur // Dimension
image = {}

def LoadImage():
    pieces = ["Tn", "Tb", "Cb", "Cn", "Fn", "Fb", "pn", "pb", "Rn", "Rb", "Dn", "Db"]
    for piece in pieces:
        image[piece] = pygame.transform.scale(pygame.image.load("C:/Users/Jerome/Documents/Images/"+ piece + ".png"), ((Taille_Carre), (Taille_Carre)))

def drawGameState(screen, G):
    drawBoard(screen)
    drawPiece(screen, G)

def drawBoard(srceen):
    colors = [pygame.Color(1, 61, 26), pygame.Color(187, 118, 63)]
    for i in range(Dimension):
        for j in range(Dimension):
            color = colors[((i+j)%2)]
            pygame.draw.rect(srceen, color, pygame.Rect(j*Taille_Carre, i*Taille_Carre, Taille_Carre, Taille_Carre ))

def drawPiece(screen, board):
    for i in range(Dimension):
        for j in range(Dimension):
            piece = board[i][j]
            if piece != "_":
                screen.blit(image[piece], pygame.Rect(j*Taille_Carre, i*Taille_Carre, Taille_Carre, Taille_Carre ))


## Programme principal


def main():

    pygame.init()

    screen = pygame.display.set_mode((Longueur, Largeur))
    clock = pygame.time.Clock()
    A = GameState()
    Plateau = A.board
    pygame.display.set_caption("Échecs")
    icon = pygame.image.load('C:/Users/Jerome/Documents/chess.png')
    pygame.display.set_icon(icon)
    screen.fill((0, 0, 0))
    LoadImage()

    running = True
    joueur = 0
    Essai = False
    Cliques = []
    action = 0
    
    while running:
        
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
               running = False
               #fermer la fenêtre ?
        
            elif event.type == pygame.MOUSEBUTTONDOWN:
                action += 1
                coul = (-1)**(joueur%2)
                location = pygame.mouse.get_pos()
                Ligne = location[1]//Taille_Carre
                Colonne = location[0]//Taille_Carre
                if G[Ligne][Colonne].couleur == coul:
                    Essai = True
                    X = Ligne
                    Y = Colonne
                    Pos = G[X][Y].possibilites(X,Y)
                    Cliques += [(X,Y)]
                if Essai and (Ligne,Colonne) in Pos and action%2 == 0:
                    Choix = (Ligne, Colonne)
                    Cliques.append(Choix)
                    deplacement = Deplacement(Cliques[0], Cliques[1], Plateau)
                    A.MakeMove(deplacement)
                    Case_Selectionnee = ()
                    Cliques = []
                    
                    Essai = False
                    M = Ligne
                    N = Colonne
                    for i in range(0,7):
                        for j in range(0,7):
                            if G[i][j].type == "Pion": G[i][j].imprudence = False

                    #réinitialisation de la grille
                    G[M][N] = G[X][Y]
                    G[X][Y] = Vide()
                    nouveau = G[M][N]

                    #allumage de l'imprudence
                    if nouveau.type == "Pion" and (X-M)**2 == 4 : nouveau.imprudence = True
                    #éteignage de la virginité
                    if nouveau.type == "Tour" or nouveau.type == "Roi" : nouveau.virginite = False

                    #effet du roque
                    if G[M][N].type == "Roi" and (Y-N)**2 == 4:
                        if N == 1:
                            G[G[M][N].ligneInitiale][2] = G[G[M][N].ligneInitiale][0]
                            G[G[M][N].ligneInitiale][0] = Vide()
                            A.MakeMove(Deplacement((G[M][N].ligneInitiale,0), (G[M][N].ligneInitiale,2), Plateau))
                        if N == 5:
                            G[G[M][N].ligneInitiale][4] = G[G[M][N].ligneInitiale][7]
                            G[G[M][N].ligneInitiale][7] = Vide()
                            A.MakeMove(Deplacement((G[M][N].ligneInitiale,7), (G[M][N].ligneInitiale,4), Plateau))

                    #effet de la prise en passant
                    if G[M][N].type == "Pion" and (X-M)**2+(Y-N)**2 == 2: #and CopiePriseEnPassant.type == "Vide":
                        G[X][N] = "Vide"
                    #pion en bout de ligne : changement de pièce
                
                    #Progression des tours de jeux
                    joueur += 1
                
                    #PAT
                    ok = []
                    a = 0
                    while ok == [] and a < 8 :
                        b = 0
                        while ok == [] and b < 8:
                            if G[a][b].couleur == (-1)*coul:
                                for i in G[a][b].possibilites(a,b):
                                    ok += [i]
                            b += 1
                        a += 1
                    if ok == []: pat = True
                    else : pat = False

        drawGameState(screen, Plateau)
        pygame.display.flip()




main()
